import csv
import logging

from databay.outlet import Outlet, metadata
from databay.record import Record

_LOGGER = logging.getLogger('databay.CsvOutlet')

class CsvOutlet(Outlet):
    """
    Outlet that will write records to a csv file.
    """


    CSV_FILE:metadata = 'CsvOutlet.CSV_FILE'
    """Filepath of the csv file to write records to."""

    FILE_MODE:metadata = 'CsvOutlet.FILE_MODE'
    """Write mode to use when writing into the csv file."""

    def __init__(self, default_filepath:str, default_file_mode:str='a', *args, **kwargs):
        """

        :param default_filepath: Filepath of the default csv file to write records to.
        :type default_filepath: str

        :param default_file_mode: Default write mode to use when writing into the csv file.
        :type default_file_mode: str
        """
        super().__init__(*args, **kwargs)
        self.default_filepath = default_filepath
        self.default_file_mode = default_file_mode

    """Metadata: Filepath of the csv file to write records to."""


    def push(self, records:[Record], update):
        """
        Writes records to a csv file.

        :type records: list[:any:`Record`]
        :param records: List of records generated by inlets. Each top-level element of this array corresponds to one inlet that successfully returned data. Note that inlets could return arrays too, making this a nested array.

        :type update: :any:`Update`
        :param update: Update object representing the particular Link update run.
        """
        for record in records:
            filepath = record.metadata.get(self.CSV_FILE, self.default_filepath)
            file_mode = record.metadata.get(self.FILE_MODE, self.default_file_mode)

            _LOGGER.info(f'{update} writing into: {filepath}, file mode: {file_mode}, record: {record}')

            with open(filepath, 'a') as f:
                writer = csv.DictWriter(f, record.payload.keys())
                writer.writerow(record.payload)
