Basic Outlet
------------

.. container:: tutorial-block

    In this example we create a simple implementation of :any:`Outlet`, printing the incoming records one by one.

    #. Extend the :any:`Outlet` class, printing the incoming data in the :any:`push <Outlet.push>` method:

    .. rst-class:: highlight-small
    .. literalinclude:: ../../examples/basic_outlet.py
        :language: python
        :start-at: class PrintOutlet
        :end-at: print(update,

    #. Instantiate it:

    .. rst-class:: highlight-small
    .. literalinclude:: ../../examples/basic_outlet.py
        :language: python
        :start-at: print_outlet = PrintOutlet
        :end-at: print_outlet = PrintOutlet

    #. Add it to a link:

    .. rst-class:: highlight-small
    .. literalinclude:: ../../examples/basic_outlet.py
        :language: python
        :start-at: link = Link(
        :end-at: name='print_outlet'

    #. Add to a planner and schedule.

    .. rst-class:: highlight-small
    .. literalinclude:: ../../examples/basic_outlet.py
        :language: python
        :start-at: planner =
        :end-at: planner.start

    Output:

    .. rst-class:: highlight-small
    .. code-block:: python

        >>> print_outlet.0 10
        >>> print_outlet.1 34
        >>> print_outlet.2 18
        >>> ...

    On each transfer :code:`PrintOutlet` prints the payload of records generated by :code:`RandomIntInlet`

    Full example:

    .. literalinclude:: ../../examples/basic_outlet.py
        :language: python

